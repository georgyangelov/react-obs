// source: protocol.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.protocol.AppendChild', null, global);
goog.exportSymbol('proto.protocol.ApplyUpdate', null, global);
goog.exportSymbol('proto.protocol.ApplyUpdate.ChangeCase', null, global);
goog.exportSymbol('proto.protocol.ClientMessage', null, global);
goog.exportSymbol('proto.protocol.ClientMessage.MessageCase', null, global);
goog.exportSymbol('proto.protocol.CreateSource', null, global);
goog.exportSymbol('proto.protocol.InitRequest', null, global);
goog.exportSymbol('proto.protocol.InitResponse', null, global);
goog.exportSymbol('proto.protocol.ObjectValue', null, global);
goog.exportSymbol('proto.protocol.Prop', null, global);
goog.exportSymbol('proto.protocol.Prop.ValueCase', null, global);
goog.exportSymbol('proto.protocol.RemoveChild', null, global);
goog.exportSymbol('proto.protocol.Scene', null, global);
goog.exportSymbol('proto.protocol.ServerMessage', null, global);
goog.exportSymbol('proto.protocol.ServerMessage.MessageCase', null, global);
goog.exportSymbol('proto.protocol.UpdateSource', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ClientMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.protocol.ClientMessage.oneofGroups_);
};
goog.inherits(proto.protocol.ClientMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.ClientMessage.displayName = 'proto.protocol.ClientMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ServerMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.protocol.ServerMessage.oneofGroups_);
};
goog.inherits(proto.protocol.ServerMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.ServerMessage.displayName = 'proto.protocol.ServerMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.InitRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.InitRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.InitRequest.displayName = 'proto.protocol.InitRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.InitResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.InitResponse.repeatedFields_, null);
};
goog.inherits(proto.protocol.InitResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.InitResponse.displayName = 'proto.protocol.InitResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Scene = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.Scene, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.Scene.displayName = 'proto.protocol.Scene';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ApplyUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.protocol.ApplyUpdate.oneofGroups_);
};
goog.inherits(proto.protocol.ApplyUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.ApplyUpdate.displayName = 'proto.protocol.ApplyUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.CreateSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.CreateSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.CreateSource.displayName = 'proto.protocol.CreateSource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.UpdateSource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.UpdateSource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.UpdateSource.displayName = 'proto.protocol.UpdateSource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.AppendChild = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.AppendChild, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.AppendChild.displayName = 'proto.protocol.AppendChild';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.RemoveChild = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protocol.RemoveChild, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.RemoveChild.displayName = 'proto.protocol.RemoveChild';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.Prop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.protocol.Prop.oneofGroups_);
};
goog.inherits(proto.protocol.Prop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.Prop.displayName = 'proto.protocol.Prop';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protocol.ObjectValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protocol.ObjectValue.repeatedFields_, null);
};
goog.inherits(proto.protocol.ObjectValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protocol.ObjectValue.displayName = 'proto.protocol.ObjectValue';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protocol.ClientMessage.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.protocol.ClientMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  INIT_REQUEST: 1,
  APPLY_UPDATE: 2
};

/**
 * @return {proto.protocol.ClientMessage.MessageCase}
 */
proto.protocol.ClientMessage.prototype.getMessageCase = function() {
  return /** @type {proto.protocol.ClientMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.protocol.ClientMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.ClientMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.ClientMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.ClientMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ClientMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    initRequest: (f = msg.getInitRequest()) && proto.protocol.InitRequest.toObject(includeInstance, f),
    applyUpdate: (f = msg.getApplyUpdate()) && proto.protocol.ApplyUpdate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ClientMessage}
 */
proto.protocol.ClientMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.ClientMessage;
  return proto.protocol.ClientMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ClientMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ClientMessage}
 */
proto.protocol.ClientMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protocol.InitRequest;
      reader.readMessage(value,proto.protocol.InitRequest.deserializeBinaryFromReader);
      msg.setInitRequest(value);
      break;
    case 2:
      var value = new proto.protocol.ApplyUpdate;
      reader.readMessage(value,proto.protocol.ApplyUpdate.deserializeBinaryFromReader);
      msg.setApplyUpdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ClientMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.ClientMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ClientMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ClientMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protocol.InitRequest.serializeBinaryToWriter
    );
  }
  f = message.getApplyUpdate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protocol.ApplyUpdate.serializeBinaryToWriter
    );
  }
};


/**
 * optional InitRequest init_request = 1;
 * @return {?proto.protocol.InitRequest}
 */
proto.protocol.ClientMessage.prototype.getInitRequest = function() {
  return /** @type{?proto.protocol.InitRequest} */ (
    jspb.Message.getWrapperField(this, proto.protocol.InitRequest, 1));
};


/**
 * @param {?proto.protocol.InitRequest|undefined} value
 * @return {!proto.protocol.ClientMessage} returns this
*/
proto.protocol.ClientMessage.prototype.setInitRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.protocol.ClientMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.ClientMessage} returns this
 */
proto.protocol.ClientMessage.prototype.clearInitRequest = function() {
  return this.setInitRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.ClientMessage.prototype.hasInitRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ApplyUpdate apply_update = 2;
 * @return {?proto.protocol.ApplyUpdate}
 */
proto.protocol.ClientMessage.prototype.getApplyUpdate = function() {
  return /** @type{?proto.protocol.ApplyUpdate} */ (
    jspb.Message.getWrapperField(this, proto.protocol.ApplyUpdate, 2));
};


/**
 * @param {?proto.protocol.ApplyUpdate|undefined} value
 * @return {!proto.protocol.ClientMessage} returns this
*/
proto.protocol.ClientMessage.prototype.setApplyUpdate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.protocol.ClientMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.ClientMessage} returns this
 */
proto.protocol.ClientMessage.prototype.clearApplyUpdate = function() {
  return this.setApplyUpdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.ClientMessage.prototype.hasApplyUpdate = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protocol.ServerMessage.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.protocol.ServerMessage.MessageCase = {
  MESSAGE_NOT_SET: 0,
  INIT_RESPONSE: 1
};

/**
 * @return {proto.protocol.ServerMessage.MessageCase}
 */
proto.protocol.ServerMessage.prototype.getMessageCase = function() {
  return /** @type {proto.protocol.ServerMessage.MessageCase} */(jspb.Message.computeOneofCase(this, proto.protocol.ServerMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.ServerMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.ServerMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.ServerMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ServerMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    initResponse: (f = msg.getInitResponse()) && proto.protocol.InitResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ServerMessage}
 */
proto.protocol.ServerMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.ServerMessage;
  return proto.protocol.ServerMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ServerMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ServerMessage}
 */
proto.protocol.ServerMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protocol.InitResponse;
      reader.readMessage(value,proto.protocol.InitResponse.deserializeBinaryFromReader);
      msg.setInitResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ServerMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.ServerMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ServerMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ServerMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitResponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protocol.InitResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional InitResponse init_response = 1;
 * @return {?proto.protocol.InitResponse}
 */
proto.protocol.ServerMessage.prototype.getInitResponse = function() {
  return /** @type{?proto.protocol.InitResponse} */ (
    jspb.Message.getWrapperField(this, proto.protocol.InitResponse, 1));
};


/**
 * @param {?proto.protocol.InitResponse|undefined} value
 * @return {!proto.protocol.ServerMessage} returns this
*/
proto.protocol.ServerMessage.prototype.setInitResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.protocol.ServerMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.ServerMessage} returns this
 */
proto.protocol.ServerMessage.prototype.clearInitResponse = function() {
  return this.setInitResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.ServerMessage.prototype.hasInitResponse = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.InitRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.InitRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.InitRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.InitRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.InitRequest}
 */
proto.protocol.InitRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.InitRequest;
  return proto.protocol.InitRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.InitRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.InitRequest}
 */
proto.protocol.InitRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.InitRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.InitRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.InitRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.InitRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string client_id = 1;
 * @return {string}
 */
proto.protocol.InitRequest.prototype.getClientId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.InitRequest} returns this
 */
proto.protocol.InitRequest.prototype.setClientId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.InitResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.InitResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.InitResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.InitResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.InitResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    canvasWidth: jspb.Message.getFieldWithDefault(msg, 1, 0),
    canvasHeight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    scenesList: jspb.Message.toObjectList(msg.getScenesList(),
    proto.protocol.Scene.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.InitResponse}
 */
proto.protocol.InitResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.InitResponse;
  return proto.protocol.InitResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.InitResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.InitResponse}
 */
proto.protocol.InitResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCanvasWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCanvasHeight(value);
      break;
    case 3:
      var value = new proto.protocol.Scene;
      reader.readMessage(value,proto.protocol.Scene.deserializeBinaryFromReader);
      msg.addScenes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.InitResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.InitResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.InitResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.InitResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCanvasWidth();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getCanvasHeight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getScenesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.protocol.Scene.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 canvas_width = 1;
 * @return {number}
 */
proto.protocol.InitResponse.prototype.getCanvasWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.protocol.InitResponse} returns this
 */
proto.protocol.InitResponse.prototype.setCanvasWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 canvas_height = 2;
 * @return {number}
 */
proto.protocol.InitResponse.prototype.getCanvasHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.protocol.InitResponse} returns this
 */
proto.protocol.InitResponse.prototype.setCanvasHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated Scene scenes = 3;
 * @return {!Array<!proto.protocol.Scene>}
 */
proto.protocol.InitResponse.prototype.getScenesList = function() {
  return /** @type{!Array<!proto.protocol.Scene>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.Scene, 3));
};


/**
 * @param {!Array<!proto.protocol.Scene>} value
 * @return {!proto.protocol.InitResponse} returns this
*/
proto.protocol.InitResponse.prototype.setScenesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.protocol.Scene=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.Scene}
 */
proto.protocol.InitResponse.prototype.addScenes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.protocol.Scene, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.protocol.InitResponse} returns this
 */
proto.protocol.InitResponse.prototype.clearScenesList = function() {
  return this.setScenesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.Scene.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.Scene.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.Scene} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.Scene.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Scene}
 */
proto.protocol.Scene.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.Scene;
  return proto.protocol.Scene.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Scene} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Scene}
 */
proto.protocol.Scene.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Scene.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.Scene.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Scene} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.Scene.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.protocol.Scene.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.Scene} returns this
 */
proto.protocol.Scene.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protocol.ApplyUpdate.oneofGroups_ = [[1,3,2,4]];

/**
 * @enum {number}
 */
proto.protocol.ApplyUpdate.ChangeCase = {
  CHANGE_NOT_SET: 0,
  CREATE_SOURCE: 1,
  UPDATE_SOURCE: 3,
  APPEND_CHILD: 2,
  REMOVE_CHILD: 4
};

/**
 * @return {proto.protocol.ApplyUpdate.ChangeCase}
 */
proto.protocol.ApplyUpdate.prototype.getChangeCase = function() {
  return /** @type {proto.protocol.ApplyUpdate.ChangeCase} */(jspb.Message.computeOneofCase(this, proto.protocol.ApplyUpdate.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.ApplyUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.ApplyUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.ApplyUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ApplyUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    createSource: (f = msg.getCreateSource()) && proto.protocol.CreateSource.toObject(includeInstance, f),
    updateSource: (f = msg.getUpdateSource()) && proto.protocol.UpdateSource.toObject(includeInstance, f),
    appendChild: (f = msg.getAppendChild()) && proto.protocol.AppendChild.toObject(includeInstance, f),
    removeChild: (f = msg.getRemoveChild()) && proto.protocol.RemoveChild.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ApplyUpdate}
 */
proto.protocol.ApplyUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.ApplyUpdate;
  return proto.protocol.ApplyUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ApplyUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ApplyUpdate}
 */
proto.protocol.ApplyUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protocol.CreateSource;
      reader.readMessage(value,proto.protocol.CreateSource.deserializeBinaryFromReader);
      msg.setCreateSource(value);
      break;
    case 3:
      var value = new proto.protocol.UpdateSource;
      reader.readMessage(value,proto.protocol.UpdateSource.deserializeBinaryFromReader);
      msg.setUpdateSource(value);
      break;
    case 2:
      var value = new proto.protocol.AppendChild;
      reader.readMessage(value,proto.protocol.AppendChild.deserializeBinaryFromReader);
      msg.setAppendChild(value);
      break;
    case 4:
      var value = new proto.protocol.RemoveChild;
      reader.readMessage(value,proto.protocol.RemoveChild.deserializeBinaryFromReader);
      msg.setRemoveChild(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ApplyUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.ApplyUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ApplyUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ApplyUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCreateSource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protocol.CreateSource.serializeBinaryToWriter
    );
  }
  f = message.getUpdateSource();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protocol.UpdateSource.serializeBinaryToWriter
    );
  }
  f = message.getAppendChild();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protocol.AppendChild.serializeBinaryToWriter
    );
  }
  f = message.getRemoveChild();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.protocol.RemoveChild.serializeBinaryToWriter
    );
  }
};


/**
 * optional CreateSource create_source = 1;
 * @return {?proto.protocol.CreateSource}
 */
proto.protocol.ApplyUpdate.prototype.getCreateSource = function() {
  return /** @type{?proto.protocol.CreateSource} */ (
    jspb.Message.getWrapperField(this, proto.protocol.CreateSource, 1));
};


/**
 * @param {?proto.protocol.CreateSource|undefined} value
 * @return {!proto.protocol.ApplyUpdate} returns this
*/
proto.protocol.ApplyUpdate.prototype.setCreateSource = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.protocol.ApplyUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.ApplyUpdate} returns this
 */
proto.protocol.ApplyUpdate.prototype.clearCreateSource = function() {
  return this.setCreateSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.ApplyUpdate.prototype.hasCreateSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UpdateSource update_source = 3;
 * @return {?proto.protocol.UpdateSource}
 */
proto.protocol.ApplyUpdate.prototype.getUpdateSource = function() {
  return /** @type{?proto.protocol.UpdateSource} */ (
    jspb.Message.getWrapperField(this, proto.protocol.UpdateSource, 3));
};


/**
 * @param {?proto.protocol.UpdateSource|undefined} value
 * @return {!proto.protocol.ApplyUpdate} returns this
*/
proto.protocol.ApplyUpdate.prototype.setUpdateSource = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.protocol.ApplyUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.ApplyUpdate} returns this
 */
proto.protocol.ApplyUpdate.prototype.clearUpdateSource = function() {
  return this.setUpdateSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.ApplyUpdate.prototype.hasUpdateSource = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AppendChild append_child = 2;
 * @return {?proto.protocol.AppendChild}
 */
proto.protocol.ApplyUpdate.prototype.getAppendChild = function() {
  return /** @type{?proto.protocol.AppendChild} */ (
    jspb.Message.getWrapperField(this, proto.protocol.AppendChild, 2));
};


/**
 * @param {?proto.protocol.AppendChild|undefined} value
 * @return {!proto.protocol.ApplyUpdate} returns this
*/
proto.protocol.ApplyUpdate.prototype.setAppendChild = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.protocol.ApplyUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.ApplyUpdate} returns this
 */
proto.protocol.ApplyUpdate.prototype.clearAppendChild = function() {
  return this.setAppendChild(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.ApplyUpdate.prototype.hasAppendChild = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RemoveChild remove_child = 4;
 * @return {?proto.protocol.RemoveChild}
 */
proto.protocol.ApplyUpdate.prototype.getRemoveChild = function() {
  return /** @type{?proto.protocol.RemoveChild} */ (
    jspb.Message.getWrapperField(this, proto.protocol.RemoveChild, 4));
};


/**
 * @param {?proto.protocol.RemoveChild|undefined} value
 * @return {!proto.protocol.ApplyUpdate} returns this
*/
proto.protocol.ApplyUpdate.prototype.setRemoveChild = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.protocol.ApplyUpdate.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.ApplyUpdate} returns this
 */
proto.protocol.ApplyUpdate.prototype.clearRemoveChild = function() {
  return this.setRemoveChild(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.ApplyUpdate.prototype.hasRemoveChild = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.CreateSource.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.CreateSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.CreateSource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CreateSource.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    settings: (f = msg.getSettings()) && proto.protocol.ObjectValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.CreateSource}
 */
proto.protocol.CreateSource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.CreateSource;
  return proto.protocol.CreateSource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.CreateSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.CreateSource}
 */
proto.protocol.CreateSource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.protocol.ObjectValue;
      reader.readMessage(value,proto.protocol.ObjectValue.deserializeBinaryFromReader);
      msg.setSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.CreateSource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.CreateSource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.CreateSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.CreateSource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSettings();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protocol.ObjectValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.protocol.CreateSource.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.CreateSource} returns this
 */
proto.protocol.CreateSource.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.protocol.CreateSource.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.CreateSource} returns this
 */
proto.protocol.CreateSource.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ObjectValue settings = 3;
 * @return {?proto.protocol.ObjectValue}
 */
proto.protocol.CreateSource.prototype.getSettings = function() {
  return /** @type{?proto.protocol.ObjectValue} */ (
    jspb.Message.getWrapperField(this, proto.protocol.ObjectValue, 3));
};


/**
 * @param {?proto.protocol.ObjectValue|undefined} value
 * @return {!proto.protocol.CreateSource} returns this
*/
proto.protocol.CreateSource.prototype.setSettings = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.CreateSource} returns this
 */
proto.protocol.CreateSource.prototype.clearSettings = function() {
  return this.setSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.CreateSource.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.UpdateSource.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.UpdateSource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.UpdateSource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.UpdateSource.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    changedProps: (f = msg.getChangedProps()) && proto.protocol.ObjectValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.UpdateSource}
 */
proto.protocol.UpdateSource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.UpdateSource;
  return proto.protocol.UpdateSource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.UpdateSource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.UpdateSource}
 */
proto.protocol.UpdateSource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.protocol.ObjectValue;
      reader.readMessage(value,proto.protocol.ObjectValue.deserializeBinaryFromReader);
      msg.setChangedProps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.UpdateSource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.UpdateSource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.UpdateSource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.UpdateSource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChangedProps();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.protocol.ObjectValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.protocol.UpdateSource.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.UpdateSource} returns this
 */
proto.protocol.UpdateSource.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ObjectValue changed_props = 3;
 * @return {?proto.protocol.ObjectValue}
 */
proto.protocol.UpdateSource.prototype.getChangedProps = function() {
  return /** @type{?proto.protocol.ObjectValue} */ (
    jspb.Message.getWrapperField(this, proto.protocol.ObjectValue, 3));
};


/**
 * @param {?proto.protocol.ObjectValue|undefined} value
 * @return {!proto.protocol.UpdateSource} returns this
*/
proto.protocol.UpdateSource.prototype.setChangedProps = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.UpdateSource} returns this
 */
proto.protocol.UpdateSource.prototype.clearChangedProps = function() {
  return this.setChangedProps(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.UpdateSource.prototype.hasChangedProps = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.AppendChild.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.AppendChild.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.AppendChild} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.AppendChild.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    childName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.AppendChild}
 */
proto.protocol.AppendChild.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.AppendChild;
  return proto.protocol.AppendChild.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.AppendChild} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.AppendChild}
 */
proto.protocol.AppendChild.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChildName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.AppendChild.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.AppendChild.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.AppendChild} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.AppendChild.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChildName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string parent_name = 1;
 * @return {string}
 */
proto.protocol.AppendChild.prototype.getParentName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.AppendChild} returns this
 */
proto.protocol.AppendChild.prototype.setParentName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string child_name = 2;
 * @return {string}
 */
proto.protocol.AppendChild.prototype.getChildName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.AppendChild} returns this
 */
proto.protocol.AppendChild.prototype.setChildName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.RemoveChild.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.RemoveChild.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.RemoveChild} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.RemoveChild.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    childName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.RemoveChild}
 */
proto.protocol.RemoveChild.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.RemoveChild;
  return proto.protocol.RemoveChild.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.RemoveChild} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.RemoveChild}
 */
proto.protocol.RemoveChild.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParentName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChildName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.RemoveChild.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.RemoveChild.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.RemoveChild} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.RemoveChild.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChildName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string parent_name = 1;
 * @return {string}
 */
proto.protocol.RemoveChild.prototype.getParentName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.RemoveChild} returns this
 */
proto.protocol.RemoveChild.prototype.setParentName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string child_name = 2;
 * @return {string}
 */
proto.protocol.RemoveChild.prototype.getChildName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.RemoveChild} returns this
 */
proto.protocol.RemoveChild.prototype.setChildName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protocol.Prop.oneofGroups_ = [[2,3,4,5,6,7]];

/**
 * @enum {number}
 */
proto.protocol.Prop.ValueCase = {
  VALUE_NOT_SET: 0,
  STRING_VALUE: 2,
  INT_VALUE: 3,
  FLOAT_VALUE: 4,
  BOOL_VALUE: 5,
  OBJECT_VALUE: 6,
  UNDEFINED: 7
};

/**
 * @return {proto.protocol.Prop.ValueCase}
 */
proto.protocol.Prop.prototype.getValueCase = function() {
  return /** @type {proto.protocol.Prop.ValueCase} */(jspb.Message.computeOneofCase(this, proto.protocol.Prop.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.Prop.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.Prop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.Prop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.Prop.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stringValue: jspb.Message.getFieldWithDefault(msg, 2, ""),
    intValue: jspb.Message.getFieldWithDefault(msg, 3, 0),
    floatValue: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    boolValue: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    objectValue: (f = msg.getObjectValue()) && proto.protocol.ObjectValue.toObject(includeInstance, f),
    undefined: jspb.Message.getBooleanFieldWithDefault(msg, 7, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.Prop}
 */
proto.protocol.Prop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.Prop;
  return proto.protocol.Prop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.Prop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.Prop}
 */
proto.protocol.Prop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIntValue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFloatValue(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolValue(value);
      break;
    case 6:
      var value = new proto.protocol.ObjectValue;
      reader.readMessage(value,proto.protocol.ObjectValue.deserializeBinaryFromReader);
      msg.setObjectValue(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUndefined(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.Prop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.Prop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.Prop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.Prop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getObjectValue();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.protocol.ObjectValue.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.protocol.Prop.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.Prop} returns this
 */
proto.protocol.Prop.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string string_value = 2;
 * @return {string}
 */
proto.protocol.Prop.prototype.getStringValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.protocol.Prop} returns this
 */
proto.protocol.Prop.prototype.setStringValue = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.protocol.Prop.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protocol.Prop} returns this
 */
proto.protocol.Prop.prototype.clearStringValue = function() {
  return jspb.Message.setOneofField(this, 2, proto.protocol.Prop.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.Prop.prototype.hasStringValue = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 int_value = 3;
 * @return {number}
 */
proto.protocol.Prop.prototype.getIntValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.protocol.Prop} returns this
 */
proto.protocol.Prop.prototype.setIntValue = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.protocol.Prop.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protocol.Prop} returns this
 */
proto.protocol.Prop.prototype.clearIntValue = function() {
  return jspb.Message.setOneofField(this, 3, proto.protocol.Prop.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.Prop.prototype.hasIntValue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double float_value = 4;
 * @return {number}
 */
proto.protocol.Prop.prototype.getFloatValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.protocol.Prop} returns this
 */
proto.protocol.Prop.prototype.setFloatValue = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.protocol.Prop.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protocol.Prop} returns this
 */
proto.protocol.Prop.prototype.clearFloatValue = function() {
  return jspb.Message.setOneofField(this, 4, proto.protocol.Prop.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.Prop.prototype.hasFloatValue = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool bool_value = 5;
 * @return {boolean}
 */
proto.protocol.Prop.prototype.getBoolValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protocol.Prop} returns this
 */
proto.protocol.Prop.prototype.setBoolValue = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.protocol.Prop.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protocol.Prop} returns this
 */
proto.protocol.Prop.prototype.clearBoolValue = function() {
  return jspb.Message.setOneofField(this, 5, proto.protocol.Prop.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.Prop.prototype.hasBoolValue = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ObjectValue object_value = 6;
 * @return {?proto.protocol.ObjectValue}
 */
proto.protocol.Prop.prototype.getObjectValue = function() {
  return /** @type{?proto.protocol.ObjectValue} */ (
    jspb.Message.getWrapperField(this, proto.protocol.ObjectValue, 6));
};


/**
 * @param {?proto.protocol.ObjectValue|undefined} value
 * @return {!proto.protocol.Prop} returns this
*/
proto.protocol.Prop.prototype.setObjectValue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.protocol.Prop.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.protocol.Prop} returns this
 */
proto.protocol.Prop.prototype.clearObjectValue = function() {
  return this.setObjectValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.Prop.prototype.hasObjectValue = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool undefined = 7;
 * @return {boolean}
 */
proto.protocol.Prop.prototype.getUndefined = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.protocol.Prop} returns this
 */
proto.protocol.Prop.prototype.setUndefined = function(value) {
  return jspb.Message.setOneofField(this, 7, proto.protocol.Prop.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.protocol.Prop} returns this
 */
proto.protocol.Prop.prototype.clearUndefined = function() {
  return jspb.Message.setOneofField(this, 7, proto.protocol.Prop.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protocol.Prop.prototype.hasUndefined = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protocol.ObjectValue.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protocol.ObjectValue.prototype.toObject = function(opt_includeInstance) {
  return proto.protocol.ObjectValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protocol.ObjectValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ObjectValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    propsList: jspb.Message.toObjectList(msg.getPropsList(),
    proto.protocol.Prop.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protocol.ObjectValue}
 */
proto.protocol.ObjectValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protocol.ObjectValue;
  return proto.protocol.ObjectValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protocol.ObjectValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protocol.ObjectValue}
 */
proto.protocol.ObjectValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protocol.Prop;
      reader.readMessage(value,proto.protocol.Prop.deserializeBinaryFromReader);
      msg.addProps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protocol.ObjectValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protocol.ObjectValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protocol.ObjectValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protocol.ObjectValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPropsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.protocol.Prop.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Prop props = 1;
 * @return {!Array<!proto.protocol.Prop>}
 */
proto.protocol.ObjectValue.prototype.getPropsList = function() {
  return /** @type{!Array<!proto.protocol.Prop>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protocol.Prop, 1));
};


/**
 * @param {!Array<!proto.protocol.Prop>} value
 * @return {!proto.protocol.ObjectValue} returns this
*/
proto.protocol.ObjectValue.prototype.setPropsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.protocol.Prop=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protocol.Prop}
 */
proto.protocol.ObjectValue.prototype.addProps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.protocol.Prop, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.protocol.ObjectValue} returns this
 */
proto.protocol.ObjectValue.prototype.clearPropsList = function() {
  return this.setPropsList([]);
};


goog.object.extend(exports, proto.protocol);
