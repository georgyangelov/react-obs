// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2eproto;
namespace protocol {
class AppendChild;
class AppendChildDefaultTypeInternal;
extern AppendChildDefaultTypeInternal _AppendChild_default_instance_;
class ApplyUpdate;
class ApplyUpdateDefaultTypeInternal;
extern ApplyUpdateDefaultTypeInternal _ApplyUpdate_default_instance_;
class ClientMessage;
class ClientMessageDefaultTypeInternal;
extern ClientMessageDefaultTypeInternal _ClientMessage_default_instance_;
class CreateSource;
class CreateSourceDefaultTypeInternal;
extern CreateSourceDefaultTypeInternal _CreateSource_default_instance_;
class InitRequest;
class InitRequestDefaultTypeInternal;
extern InitRequestDefaultTypeInternal _InitRequest_default_instance_;
class InitResponse;
class InitResponseDefaultTypeInternal;
extern InitResponseDefaultTypeInternal _InitResponse_default_instance_;
class ObjectValue;
class ObjectValueDefaultTypeInternal;
extern ObjectValueDefaultTypeInternal _ObjectValue_default_instance_;
class Prop;
class PropDefaultTypeInternal;
extern PropDefaultTypeInternal _Prop_default_instance_;
class RemoveChild;
class RemoveChildDefaultTypeInternal;
extern RemoveChildDefaultTypeInternal _RemoveChild_default_instance_;
class Scene;
class SceneDefaultTypeInternal;
extern SceneDefaultTypeInternal _Scene_default_instance_;
class ServerMessage;
class ServerMessageDefaultTypeInternal;
extern ServerMessageDefaultTypeInternal _ServerMessage_default_instance_;
class UpdateSource;
class UpdateSourceDefaultTypeInternal;
extern UpdateSourceDefaultTypeInternal _UpdateSource_default_instance_;
}  // namespace protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::protocol::AppendChild* Arena::CreateMaybeMessage<::protocol::AppendChild>(Arena*);
template<> ::protocol::ApplyUpdate* Arena::CreateMaybeMessage<::protocol::ApplyUpdate>(Arena*);
template<> ::protocol::ClientMessage* Arena::CreateMaybeMessage<::protocol::ClientMessage>(Arena*);
template<> ::protocol::CreateSource* Arena::CreateMaybeMessage<::protocol::CreateSource>(Arena*);
template<> ::protocol::InitRequest* Arena::CreateMaybeMessage<::protocol::InitRequest>(Arena*);
template<> ::protocol::InitResponse* Arena::CreateMaybeMessage<::protocol::InitResponse>(Arena*);
template<> ::protocol::ObjectValue* Arena::CreateMaybeMessage<::protocol::ObjectValue>(Arena*);
template<> ::protocol::Prop* Arena::CreateMaybeMessage<::protocol::Prop>(Arena*);
template<> ::protocol::RemoveChild* Arena::CreateMaybeMessage<::protocol::RemoveChild>(Arena*);
template<> ::protocol::Scene* Arena::CreateMaybeMessage<::protocol::Scene>(Arena*);
template<> ::protocol::ServerMessage* Arena::CreateMaybeMessage<::protocol::ServerMessage>(Arena*);
template<> ::protocol::UpdateSource* Arena::CreateMaybeMessage<::protocol::UpdateSource>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protocol {

// ===================================================================

class ClientMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ClientMessage) */ {
 public:
  inline ClientMessage() : ClientMessage(nullptr) {}
  virtual ~ClientMessage();

  ClientMessage(const ClientMessage& from);
  ClientMessage(ClientMessage&& from) noexcept
    : ClientMessage() {
    *this = ::std::move(from);
  }

  inline ClientMessage& operator=(const ClientMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientMessage& operator=(ClientMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientMessage& default_instance();

  enum MessageCase {
    kInitRequest = 1,
    kApplyUpdate = 2,
    MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientMessage* internal_default_instance() {
    return reinterpret_cast<const ClientMessage*>(
               &_ClientMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientMessage& a, ClientMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientMessage* New() const final {
    return CreateMaybeMessage<ClientMessage>(nullptr);
  }

  ClientMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientMessage& from);
  void MergeFrom(const ClientMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ClientMessage";
  }
  protected:
  explicit ClientMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitRequestFieldNumber = 1,
    kApplyUpdateFieldNumber = 2,
  };
  // .protocol.InitRequest init_request = 1;
  bool has_init_request() const;
  private:
  bool _internal_has_init_request() const;
  public:
  void clear_init_request();
  const ::protocol::InitRequest& init_request() const;
  ::protocol::InitRequest* release_init_request();
  ::protocol::InitRequest* mutable_init_request();
  void set_allocated_init_request(::protocol::InitRequest* init_request);
  private:
  const ::protocol::InitRequest& _internal_init_request() const;
  ::protocol::InitRequest* _internal_mutable_init_request();
  public:
  void unsafe_arena_set_allocated_init_request(
      ::protocol::InitRequest* init_request);
  ::protocol::InitRequest* unsafe_arena_release_init_request();

  // .protocol.ApplyUpdate apply_update = 2;
  bool has_apply_update() const;
  private:
  bool _internal_has_apply_update() const;
  public:
  void clear_apply_update();
  const ::protocol::ApplyUpdate& apply_update() const;
  ::protocol::ApplyUpdate* release_apply_update();
  ::protocol::ApplyUpdate* mutable_apply_update();
  void set_allocated_apply_update(::protocol::ApplyUpdate* apply_update);
  private:
  const ::protocol::ApplyUpdate& _internal_apply_update() const;
  ::protocol::ApplyUpdate* _internal_mutable_apply_update();
  public:
  void unsafe_arena_set_allocated_apply_update(
      ::protocol::ApplyUpdate* apply_update);
  ::protocol::ApplyUpdate* unsafe_arena_release_apply_update();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:protocol.ClientMessage)
 private:
  class _Internal;
  void set_has_init_request();
  void set_has_apply_update();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MessageUnion {
    MessageUnion() {}
    ::protocol::InitRequest* init_request_;
    ::protocol::ApplyUpdate* apply_update_;
  } message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class ServerMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ServerMessage) */ {
 public:
  inline ServerMessage() : ServerMessage(nullptr) {}
  virtual ~ServerMessage();

  ServerMessage(const ServerMessage& from);
  ServerMessage(ServerMessage&& from) noexcept
    : ServerMessage() {
    *this = ::std::move(from);
  }

  inline ServerMessage& operator=(const ServerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerMessage& operator=(ServerMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerMessage& default_instance();

  enum MessageCase {
    kInitResponse = 1,
    MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerMessage* internal_default_instance() {
    return reinterpret_cast<const ServerMessage*>(
               &_ServerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerMessage& a, ServerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerMessage* New() const final {
    return CreateMaybeMessage<ServerMessage>(nullptr);
  }

  ServerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerMessage& from);
  void MergeFrom(const ServerMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ServerMessage";
  }
  protected:
  explicit ServerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitResponseFieldNumber = 1,
  };
  // .protocol.InitResponse init_response = 1;
  bool has_init_response() const;
  private:
  bool _internal_has_init_response() const;
  public:
  void clear_init_response();
  const ::protocol::InitResponse& init_response() const;
  ::protocol::InitResponse* release_init_response();
  ::protocol::InitResponse* mutable_init_response();
  void set_allocated_init_response(::protocol::InitResponse* init_response);
  private:
  const ::protocol::InitResponse& _internal_init_response() const;
  ::protocol::InitResponse* _internal_mutable_init_response();
  public:
  void unsafe_arena_set_allocated_init_response(
      ::protocol::InitResponse* init_response);
  ::protocol::InitResponse* unsafe_arena_release_init_response();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:protocol.ServerMessage)
 private:
  class _Internal;
  void set_has_init_response();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MessageUnion {
    MessageUnion() {}
    ::protocol::InitResponse* init_response_;
  } message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class InitRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.InitRequest) */ {
 public:
  inline InitRequest() : InitRequest(nullptr) {}
  virtual ~InitRequest();

  InitRequest(const InitRequest& from);
  InitRequest(InitRequest&& from) noexcept
    : InitRequest() {
    *this = ::std::move(from);
  }

  inline InitRequest& operator=(const InitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitRequest& operator=(InitRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InitRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitRequest* internal_default_instance() {
    return reinterpret_cast<const InitRequest*>(
               &_InitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InitRequest& a, InitRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InitRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitRequest* New() const final {
    return CreateMaybeMessage<InitRequest>(nullptr);
  }

  InitRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InitRequest& from);
  void MergeFrom(const InitRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.InitRequest";
  }
  protected:
  explicit InitRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // @@protoc_insertion_point(class_scope:protocol.InitRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class InitResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.InitResponse) */ {
 public:
  inline InitResponse() : InitResponse(nullptr) {}
  virtual ~InitResponse();

  InitResponse(const InitResponse& from);
  InitResponse(InitResponse&& from) noexcept
    : InitResponse() {
    *this = ::std::move(from);
  }

  inline InitResponse& operator=(const InitResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitResponse& operator=(InitResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InitResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitResponse* internal_default_instance() {
    return reinterpret_cast<const InitResponse*>(
               &_InitResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InitResponse& a, InitResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InitResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitResponse* New() const final {
    return CreateMaybeMessage<InitResponse>(nullptr);
  }

  InitResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InitResponse& from);
  void MergeFrom(const InitResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.InitResponse";
  }
  protected:
  explicit InitResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScenesFieldNumber = 3,
    kCanvasWidthFieldNumber = 1,
    kCanvasHeightFieldNumber = 2,
  };
  // repeated .protocol.Scene scenes = 3;
  int scenes_size() const;
  private:
  int _internal_scenes_size() const;
  public:
  void clear_scenes();
  ::protocol::Scene* mutable_scenes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Scene >*
      mutable_scenes();
  private:
  const ::protocol::Scene& _internal_scenes(int index) const;
  ::protocol::Scene* _internal_add_scenes();
  public:
  const ::protocol::Scene& scenes(int index) const;
  ::protocol::Scene* add_scenes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Scene >&
      scenes() const;

  // uint32 canvas_width = 1;
  void clear_canvas_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 canvas_width() const;
  void set_canvas_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_canvas_width() const;
  void _internal_set_canvas_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 canvas_height = 2;
  void clear_canvas_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 canvas_height() const;
  void set_canvas_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_canvas_height() const;
  void _internal_set_canvas_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:protocol.InitResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Scene > scenes_;
  ::PROTOBUF_NAMESPACE_ID::uint32 canvas_width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 canvas_height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class Scene PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Scene) */ {
 public:
  inline Scene() : Scene(nullptr) {}
  virtual ~Scene();

  Scene(const Scene& from);
  Scene(Scene&& from) noexcept
    : Scene() {
    *this = ::std::move(from);
  }

  inline Scene& operator=(const Scene& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scene& operator=(Scene&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Scene& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scene* internal_default_instance() {
    return reinterpret_cast<const Scene*>(
               &_Scene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Scene& a, Scene& b) {
    a.Swap(&b);
  }
  inline void Swap(Scene* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Scene* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scene* New() const final {
    return CreateMaybeMessage<Scene>(nullptr);
  }

  Scene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scene>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scene& from);
  void MergeFrom(const Scene& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scene* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Scene";
  }
  protected:
  explicit Scene(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:protocol.Scene)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class ApplyUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ApplyUpdate) */ {
 public:
  inline ApplyUpdate() : ApplyUpdate(nullptr) {}
  virtual ~ApplyUpdate();

  ApplyUpdate(const ApplyUpdate& from);
  ApplyUpdate(ApplyUpdate&& from) noexcept
    : ApplyUpdate() {
    *this = ::std::move(from);
  }

  inline ApplyUpdate& operator=(const ApplyUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplyUpdate& operator=(ApplyUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApplyUpdate& default_instance();

  enum ChangeCase {
    kCreateSource = 1,
    kUpdateSource = 3,
    kAppendChild = 2,
    kRemoveChild = 4,
    CHANGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplyUpdate* internal_default_instance() {
    return reinterpret_cast<const ApplyUpdate*>(
               &_ApplyUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ApplyUpdate& a, ApplyUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplyUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplyUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplyUpdate* New() const final {
    return CreateMaybeMessage<ApplyUpdate>(nullptr);
  }

  ApplyUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplyUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApplyUpdate& from);
  void MergeFrom(const ApplyUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ApplyUpdate";
  }
  protected:
  explicit ApplyUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreateSourceFieldNumber = 1,
    kUpdateSourceFieldNumber = 3,
    kAppendChildFieldNumber = 2,
    kRemoveChildFieldNumber = 4,
  };
  // .protocol.CreateSource create_source = 1;
  bool has_create_source() const;
  private:
  bool _internal_has_create_source() const;
  public:
  void clear_create_source();
  const ::protocol::CreateSource& create_source() const;
  ::protocol::CreateSource* release_create_source();
  ::protocol::CreateSource* mutable_create_source();
  void set_allocated_create_source(::protocol::CreateSource* create_source);
  private:
  const ::protocol::CreateSource& _internal_create_source() const;
  ::protocol::CreateSource* _internal_mutable_create_source();
  public:
  void unsafe_arena_set_allocated_create_source(
      ::protocol::CreateSource* create_source);
  ::protocol::CreateSource* unsafe_arena_release_create_source();

  // .protocol.UpdateSource update_source = 3;
  bool has_update_source() const;
  private:
  bool _internal_has_update_source() const;
  public:
  void clear_update_source();
  const ::protocol::UpdateSource& update_source() const;
  ::protocol::UpdateSource* release_update_source();
  ::protocol::UpdateSource* mutable_update_source();
  void set_allocated_update_source(::protocol::UpdateSource* update_source);
  private:
  const ::protocol::UpdateSource& _internal_update_source() const;
  ::protocol::UpdateSource* _internal_mutable_update_source();
  public:
  void unsafe_arena_set_allocated_update_source(
      ::protocol::UpdateSource* update_source);
  ::protocol::UpdateSource* unsafe_arena_release_update_source();

  // .protocol.AppendChild append_child = 2;
  bool has_append_child() const;
  private:
  bool _internal_has_append_child() const;
  public:
  void clear_append_child();
  const ::protocol::AppendChild& append_child() const;
  ::protocol::AppendChild* release_append_child();
  ::protocol::AppendChild* mutable_append_child();
  void set_allocated_append_child(::protocol::AppendChild* append_child);
  private:
  const ::protocol::AppendChild& _internal_append_child() const;
  ::protocol::AppendChild* _internal_mutable_append_child();
  public:
  void unsafe_arena_set_allocated_append_child(
      ::protocol::AppendChild* append_child);
  ::protocol::AppendChild* unsafe_arena_release_append_child();

  // .protocol.RemoveChild remove_child = 4;
  bool has_remove_child() const;
  private:
  bool _internal_has_remove_child() const;
  public:
  void clear_remove_child();
  const ::protocol::RemoveChild& remove_child() const;
  ::protocol::RemoveChild* release_remove_child();
  ::protocol::RemoveChild* mutable_remove_child();
  void set_allocated_remove_child(::protocol::RemoveChild* remove_child);
  private:
  const ::protocol::RemoveChild& _internal_remove_child() const;
  ::protocol::RemoveChild* _internal_mutable_remove_child();
  public:
  void unsafe_arena_set_allocated_remove_child(
      ::protocol::RemoveChild* remove_child);
  ::protocol::RemoveChild* unsafe_arena_release_remove_child();

  void clear_change();
  ChangeCase change_case() const;
  // @@protoc_insertion_point(class_scope:protocol.ApplyUpdate)
 private:
  class _Internal;
  void set_has_create_source();
  void set_has_update_source();
  void set_has_append_child();
  void set_has_remove_child();

  inline bool has_change() const;
  inline void clear_has_change();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ChangeUnion {
    ChangeUnion() {}
    ::protocol::CreateSource* create_source_;
    ::protocol::UpdateSource* update_source_;
    ::protocol::AppendChild* append_child_;
    ::protocol::RemoveChild* remove_child_;
  } change_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class CreateSource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.CreateSource) */ {
 public:
  inline CreateSource() : CreateSource(nullptr) {}
  virtual ~CreateSource();

  CreateSource(const CreateSource& from);
  CreateSource(CreateSource&& from) noexcept
    : CreateSource() {
    *this = ::std::move(from);
  }

  inline CreateSource& operator=(const CreateSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSource& operator=(CreateSource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateSource* internal_default_instance() {
    return reinterpret_cast<const CreateSource*>(
               &_CreateSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CreateSource& a, CreateSource& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateSource* New() const final {
    return CreateMaybeMessage<CreateSource>(nullptr);
  }

  CreateSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateSource& from);
  void MergeFrom(const CreateSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.CreateSource";
  }
  protected:
  explicit CreateSource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kSettingsFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .protocol.ObjectValue settings = 3;
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::protocol::ObjectValue& settings() const;
  ::protocol::ObjectValue* release_settings();
  ::protocol::ObjectValue* mutable_settings();
  void set_allocated_settings(::protocol::ObjectValue* settings);
  private:
  const ::protocol::ObjectValue& _internal_settings() const;
  ::protocol::ObjectValue* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::protocol::ObjectValue* settings);
  ::protocol::ObjectValue* unsafe_arena_release_settings();

  // @@protoc_insertion_point(class_scope:protocol.CreateSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::protocol::ObjectValue* settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class UpdateSource PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.UpdateSource) */ {
 public:
  inline UpdateSource() : UpdateSource(nullptr) {}
  virtual ~UpdateSource();

  UpdateSource(const UpdateSource& from);
  UpdateSource(UpdateSource&& from) noexcept
    : UpdateSource() {
    *this = ::std::move(from);
  }

  inline UpdateSource& operator=(const UpdateSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSource& operator=(UpdateSource&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateSource* internal_default_instance() {
    return reinterpret_cast<const UpdateSource*>(
               &_UpdateSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UpdateSource& a, UpdateSource& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSource* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateSource* New() const final {
    return CreateMaybeMessage<UpdateSource>(nullptr);
  }

  UpdateSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateSource& from);
  void MergeFrom(const UpdateSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.UpdateSource";
  }
  protected:
  explicit UpdateSource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kChangedPropsFieldNumber = 3,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .protocol.ObjectValue changed_props = 3;
  bool has_changed_props() const;
  private:
  bool _internal_has_changed_props() const;
  public:
  void clear_changed_props();
  const ::protocol::ObjectValue& changed_props() const;
  ::protocol::ObjectValue* release_changed_props();
  ::protocol::ObjectValue* mutable_changed_props();
  void set_allocated_changed_props(::protocol::ObjectValue* changed_props);
  private:
  const ::protocol::ObjectValue& _internal_changed_props() const;
  ::protocol::ObjectValue* _internal_mutable_changed_props();
  public:
  void unsafe_arena_set_allocated_changed_props(
      ::protocol::ObjectValue* changed_props);
  ::protocol::ObjectValue* unsafe_arena_release_changed_props();

  // @@protoc_insertion_point(class_scope:protocol.UpdateSource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::protocol::ObjectValue* changed_props_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class AppendChild PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.AppendChild) */ {
 public:
  inline AppendChild() : AppendChild(nullptr) {}
  virtual ~AppendChild();

  AppendChild(const AppendChild& from);
  AppendChild(AppendChild&& from) noexcept
    : AppendChild() {
    *this = ::std::move(from);
  }

  inline AppendChild& operator=(const AppendChild& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppendChild& operator=(AppendChild&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppendChild& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendChild* internal_default_instance() {
    return reinterpret_cast<const AppendChild*>(
               &_AppendChild_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AppendChild& a, AppendChild& b) {
    a.Swap(&b);
  }
  inline void Swap(AppendChild* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppendChild* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppendChild* New() const final {
    return CreateMaybeMessage<AppendChild>(nullptr);
  }

  AppendChild* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppendChild>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppendChild& from);
  void MergeFrom(const AppendChild& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendChild* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.AppendChild";
  }
  protected:
  explicit AppendChild(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentNameFieldNumber = 1,
    kChildNameFieldNumber = 2,
  };
  // string parent_name = 1;
  void clear_parent_name();
  const std::string& parent_name() const;
  void set_parent_name(const std::string& value);
  void set_parent_name(std::string&& value);
  void set_parent_name(const char* value);
  void set_parent_name(const char* value, size_t size);
  std::string* mutable_parent_name();
  std::string* release_parent_name();
  void set_allocated_parent_name(std::string* parent_name);
  private:
  const std::string& _internal_parent_name() const;
  void _internal_set_parent_name(const std::string& value);
  std::string* _internal_mutable_parent_name();
  public:

  // string child_name = 2;
  void clear_child_name();
  const std::string& child_name() const;
  void set_child_name(const std::string& value);
  void set_child_name(std::string&& value);
  void set_child_name(const char* value);
  void set_child_name(const char* value, size_t size);
  std::string* mutable_child_name();
  std::string* release_child_name();
  void set_allocated_child_name(std::string* child_name);
  private:
  const std::string& _internal_child_name() const;
  void _internal_set_child_name(const std::string& value);
  std::string* _internal_mutable_child_name();
  public:

  // @@protoc_insertion_point(class_scope:protocol.AppendChild)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr child_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class RemoveChild PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.RemoveChild) */ {
 public:
  inline RemoveChild() : RemoveChild(nullptr) {}
  virtual ~RemoveChild();

  RemoveChild(const RemoveChild& from);
  RemoveChild(RemoveChild&& from) noexcept
    : RemoveChild() {
    *this = ::std::move(from);
  }

  inline RemoveChild& operator=(const RemoveChild& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveChild& operator=(RemoveChild&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoveChild& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveChild* internal_default_instance() {
    return reinterpret_cast<const RemoveChild*>(
               &_RemoveChild_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RemoveChild& a, RemoveChild& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveChild* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveChild* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoveChild* New() const final {
    return CreateMaybeMessage<RemoveChild>(nullptr);
  }

  RemoveChild* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoveChild>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoveChild& from);
  void MergeFrom(const RemoveChild& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveChild* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.RemoveChild";
  }
  protected:
  explicit RemoveChild(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentNameFieldNumber = 1,
    kChildNameFieldNumber = 2,
  };
  // string parent_name = 1;
  void clear_parent_name();
  const std::string& parent_name() const;
  void set_parent_name(const std::string& value);
  void set_parent_name(std::string&& value);
  void set_parent_name(const char* value);
  void set_parent_name(const char* value, size_t size);
  std::string* mutable_parent_name();
  std::string* release_parent_name();
  void set_allocated_parent_name(std::string* parent_name);
  private:
  const std::string& _internal_parent_name() const;
  void _internal_set_parent_name(const std::string& value);
  std::string* _internal_mutable_parent_name();
  public:

  // string child_name = 2;
  void clear_child_name();
  const std::string& child_name() const;
  void set_child_name(const std::string& value);
  void set_child_name(std::string&& value);
  void set_child_name(const char* value);
  void set_child_name(const char* value, size_t size);
  std::string* mutable_child_name();
  std::string* release_child_name();
  void set_allocated_child_name(std::string* child_name);
  private:
  const std::string& _internal_child_name() const;
  void _internal_set_child_name(const std::string& value);
  std::string* _internal_mutable_child_name();
  public:

  // @@protoc_insertion_point(class_scope:protocol.RemoveChild)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr child_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class Prop PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.Prop) */ {
 public:
  inline Prop() : Prop(nullptr) {}
  virtual ~Prop();

  Prop(const Prop& from);
  Prop(Prop&& from) noexcept
    : Prop() {
    *this = ::std::move(from);
  }

  inline Prop& operator=(const Prop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Prop& operator=(Prop&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Prop& default_instance();

  enum ValueCase {
    kStringValue = 2,
    kIntValue = 3,
    kFloatValue = 4,
    kBoolValue = 5,
    kObjectValue = 6,
    kUndefined = 7,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Prop* internal_default_instance() {
    return reinterpret_cast<const Prop*>(
               &_Prop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Prop& a, Prop& b) {
    a.Swap(&b);
  }
  inline void Swap(Prop* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Prop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Prop* New() const final {
    return CreateMaybeMessage<Prop>(nullptr);
  }

  Prop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Prop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Prop& from);
  void MergeFrom(const Prop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Prop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.Prop";
  }
  protected:
  explicit Prop(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kStringValueFieldNumber = 2,
    kIntValueFieldNumber = 3,
    kFloatValueFieldNumber = 4,
    kBoolValueFieldNumber = 5,
    kObjectValueFieldNumber = 6,
    kUndefinedFieldNumber = 7,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string string_value = 2;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  void set_string_value(const std::string& value);
  void set_string_value(std::string&& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  std::string* mutable_string_value();
  std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // int64 int_value = 3;
  private:
  bool _internal_has_int_value() const;
  public:
  void clear_int_value();
  ::PROTOBUF_NAMESPACE_ID::int64 int_value() const;
  void set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int_value() const;
  void _internal_set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // double float_value = 4;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  double float_value() const;
  void set_float_value(double value);
  private:
  double _internal_float_value() const;
  void _internal_set_float_value(double value);
  public:

  // bool bool_value = 5;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // .protocol.ObjectValue object_value = 6;
  bool has_object_value() const;
  private:
  bool _internal_has_object_value() const;
  public:
  void clear_object_value();
  const ::protocol::ObjectValue& object_value() const;
  ::protocol::ObjectValue* release_object_value();
  ::protocol::ObjectValue* mutable_object_value();
  void set_allocated_object_value(::protocol::ObjectValue* object_value);
  private:
  const ::protocol::ObjectValue& _internal_object_value() const;
  ::protocol::ObjectValue* _internal_mutable_object_value();
  public:
  void unsafe_arena_set_allocated_object_value(
      ::protocol::ObjectValue* object_value);
  ::protocol::ObjectValue* unsafe_arena_release_object_value();

  // bool undefined = 7;
  private:
  bool _internal_has_undefined() const;
  public:
  void clear_undefined();
  bool undefined() const;
  void set_undefined(bool value);
  private:
  bool _internal_undefined() const;
  void _internal_set_undefined(bool value);
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:protocol.Prop)
 private:
  class _Internal;
  void set_has_string_value();
  void set_has_int_value();
  void set_has_float_value();
  void set_has_bool_value();
  void set_has_object_value();
  void set_has_undefined();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  union ValueUnion {
    ValueUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 int_value_;
    double float_value_;
    bool bool_value_;
    ::protocol::ObjectValue* object_value_;
    bool undefined_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class ObjectValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protocol.ObjectValue) */ {
 public:
  inline ObjectValue() : ObjectValue(nullptr) {}
  virtual ~ObjectValue();

  ObjectValue(const ObjectValue& from);
  ObjectValue(ObjectValue&& from) noexcept
    : ObjectValue() {
    *this = ::std::move(from);
  }

  inline ObjectValue& operator=(const ObjectValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectValue& operator=(ObjectValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ObjectValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ObjectValue* internal_default_instance() {
    return reinterpret_cast<const ObjectValue*>(
               &_ObjectValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ObjectValue& a, ObjectValue& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectValue* New() const final {
    return CreateMaybeMessage<ObjectValue>(nullptr);
  }

  ObjectValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectValue& from);
  void MergeFrom(const ObjectValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protocol.ObjectValue";
  }
  protected:
  explicit ObjectValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropsFieldNumber = 1,
  };
  // repeated .protocol.Prop props = 1;
  int props_size() const;
  private:
  int _internal_props_size() const;
  public:
  void clear_props();
  ::protocol::Prop* mutable_props(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Prop >*
      mutable_props();
  private:
  const ::protocol::Prop& _internal_props(int index) const;
  ::protocol::Prop* _internal_add_props();
  public:
  const ::protocol::Prop& props(int index) const;
  ::protocol::Prop* add_props();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Prop >&
      props() const;

  // @@protoc_insertion_point(class_scope:protocol.ObjectValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Prop > props_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientMessage

// .protocol.InitRequest init_request = 1;
inline bool ClientMessage::_internal_has_init_request() const {
  return message_case() == kInitRequest;
}
inline bool ClientMessage::has_init_request() const {
  return _internal_has_init_request();
}
inline void ClientMessage::set_has_init_request() {
  _oneof_case_[0] = kInitRequest;
}
inline void ClientMessage::clear_init_request() {
  if (_internal_has_init_request()) {
    if (GetArena() == nullptr) {
      delete message_.init_request_;
    }
    clear_has_message();
  }
}
inline ::protocol::InitRequest* ClientMessage::release_init_request() {
  // @@protoc_insertion_point(field_release:protocol.ClientMessage.init_request)
  if (_internal_has_init_request()) {
    clear_has_message();
      ::protocol::InitRequest* temp = message_.init_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.init_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::InitRequest& ClientMessage::_internal_init_request() const {
  return _internal_has_init_request()
      ? *message_.init_request_
      : *reinterpret_cast< ::protocol::InitRequest*>(&::protocol::_InitRequest_default_instance_);
}
inline const ::protocol::InitRequest& ClientMessage::init_request() const {
  // @@protoc_insertion_point(field_get:protocol.ClientMessage.init_request)
  return _internal_init_request();
}
inline ::protocol::InitRequest* ClientMessage::unsafe_arena_release_init_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.ClientMessage.init_request)
  if (_internal_has_init_request()) {
    clear_has_message();
    ::protocol::InitRequest* temp = message_.init_request_;
    message_.init_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientMessage::unsafe_arena_set_allocated_init_request(::protocol::InitRequest* init_request) {
  clear_message();
  if (init_request) {
    set_has_init_request();
    message_.init_request_ = init_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.ClientMessage.init_request)
}
inline ::protocol::InitRequest* ClientMessage::_internal_mutable_init_request() {
  if (!_internal_has_init_request()) {
    clear_message();
    set_has_init_request();
    message_.init_request_ = CreateMaybeMessage< ::protocol::InitRequest >(GetArena());
  }
  return message_.init_request_;
}
inline ::protocol::InitRequest* ClientMessage::mutable_init_request() {
  // @@protoc_insertion_point(field_mutable:protocol.ClientMessage.init_request)
  return _internal_mutable_init_request();
}

// .protocol.ApplyUpdate apply_update = 2;
inline bool ClientMessage::_internal_has_apply_update() const {
  return message_case() == kApplyUpdate;
}
inline bool ClientMessage::has_apply_update() const {
  return _internal_has_apply_update();
}
inline void ClientMessage::set_has_apply_update() {
  _oneof_case_[0] = kApplyUpdate;
}
inline void ClientMessage::clear_apply_update() {
  if (_internal_has_apply_update()) {
    if (GetArena() == nullptr) {
      delete message_.apply_update_;
    }
    clear_has_message();
  }
}
inline ::protocol::ApplyUpdate* ClientMessage::release_apply_update() {
  // @@protoc_insertion_point(field_release:protocol.ClientMessage.apply_update)
  if (_internal_has_apply_update()) {
    clear_has_message();
      ::protocol::ApplyUpdate* temp = message_.apply_update_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.apply_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::ApplyUpdate& ClientMessage::_internal_apply_update() const {
  return _internal_has_apply_update()
      ? *message_.apply_update_
      : *reinterpret_cast< ::protocol::ApplyUpdate*>(&::protocol::_ApplyUpdate_default_instance_);
}
inline const ::protocol::ApplyUpdate& ClientMessage::apply_update() const {
  // @@protoc_insertion_point(field_get:protocol.ClientMessage.apply_update)
  return _internal_apply_update();
}
inline ::protocol::ApplyUpdate* ClientMessage::unsafe_arena_release_apply_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.ClientMessage.apply_update)
  if (_internal_has_apply_update()) {
    clear_has_message();
    ::protocol::ApplyUpdate* temp = message_.apply_update_;
    message_.apply_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ClientMessage::unsafe_arena_set_allocated_apply_update(::protocol::ApplyUpdate* apply_update) {
  clear_message();
  if (apply_update) {
    set_has_apply_update();
    message_.apply_update_ = apply_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.ClientMessage.apply_update)
}
inline ::protocol::ApplyUpdate* ClientMessage::_internal_mutable_apply_update() {
  if (!_internal_has_apply_update()) {
    clear_message();
    set_has_apply_update();
    message_.apply_update_ = CreateMaybeMessage< ::protocol::ApplyUpdate >(GetArena());
  }
  return message_.apply_update_;
}
inline ::protocol::ApplyUpdate* ClientMessage::mutable_apply_update() {
  // @@protoc_insertion_point(field_mutable:protocol.ClientMessage.apply_update)
  return _internal_mutable_apply_update();
}

inline bool ClientMessage::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void ClientMessage::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline ClientMessage::MessageCase ClientMessage::message_case() const {
  return ClientMessage::MessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ServerMessage

// .protocol.InitResponse init_response = 1;
inline bool ServerMessage::_internal_has_init_response() const {
  return message_case() == kInitResponse;
}
inline bool ServerMessage::has_init_response() const {
  return _internal_has_init_response();
}
inline void ServerMessage::set_has_init_response() {
  _oneof_case_[0] = kInitResponse;
}
inline void ServerMessage::clear_init_response() {
  if (_internal_has_init_response()) {
    if (GetArena() == nullptr) {
      delete message_.init_response_;
    }
    clear_has_message();
  }
}
inline ::protocol::InitResponse* ServerMessage::release_init_response() {
  // @@protoc_insertion_point(field_release:protocol.ServerMessage.init_response)
  if (_internal_has_init_response()) {
    clear_has_message();
      ::protocol::InitResponse* temp = message_.init_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.init_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::InitResponse& ServerMessage::_internal_init_response() const {
  return _internal_has_init_response()
      ? *message_.init_response_
      : *reinterpret_cast< ::protocol::InitResponse*>(&::protocol::_InitResponse_default_instance_);
}
inline const ::protocol::InitResponse& ServerMessage::init_response() const {
  // @@protoc_insertion_point(field_get:protocol.ServerMessage.init_response)
  return _internal_init_response();
}
inline ::protocol::InitResponse* ServerMessage::unsafe_arena_release_init_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.ServerMessage.init_response)
  if (_internal_has_init_response()) {
    clear_has_message();
    ::protocol::InitResponse* temp = message_.init_response_;
    message_.init_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerMessage::unsafe_arena_set_allocated_init_response(::protocol::InitResponse* init_response) {
  clear_message();
  if (init_response) {
    set_has_init_response();
    message_.init_response_ = init_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.ServerMessage.init_response)
}
inline ::protocol::InitResponse* ServerMessage::_internal_mutable_init_response() {
  if (!_internal_has_init_response()) {
    clear_message();
    set_has_init_response();
    message_.init_response_ = CreateMaybeMessage< ::protocol::InitResponse >(GetArena());
  }
  return message_.init_response_;
}
inline ::protocol::InitResponse* ServerMessage::mutable_init_response() {
  // @@protoc_insertion_point(field_mutable:protocol.ServerMessage.init_response)
  return _internal_mutable_init_response();
}

inline bool ServerMessage::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void ServerMessage::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline ServerMessage::MessageCase ServerMessage::message_case() const {
  return ServerMessage::MessageCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// InitRequest

// string client_id = 1;
inline void InitRequest::clear_client_id() {
  client_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& InitRequest::client_id() const {
  // @@protoc_insertion_point(field_get:protocol.InitRequest.client_id)
  return _internal_client_id();
}
inline void InitRequest::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:protocol.InitRequest.client_id)
}
inline std::string* InitRequest::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:protocol.InitRequest.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& InitRequest::_internal_client_id() const {
  return client_id_.Get();
}
inline void InitRequest::_internal_set_client_id(const std::string& value) {
  
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InitRequest::set_client_id(std::string&& value) {
  
  client_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.InitRequest.client_id)
}
inline void InitRequest::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.InitRequest.client_id)
}
inline void InitRequest::set_client_id(const char* value,
    size_t size) {
  
  client_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.InitRequest.client_id)
}
inline std::string* InitRequest::_internal_mutable_client_id() {
  
  return client_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InitRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:protocol.InitRequest.client_id)
  return client_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InitRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.InitRequest.client_id)
}

// -------------------------------------------------------------------

// InitResponse

// uint32 canvas_width = 1;
inline void InitResponse::clear_canvas_width() {
  canvas_width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InitResponse::_internal_canvas_width() const {
  return canvas_width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InitResponse::canvas_width() const {
  // @@protoc_insertion_point(field_get:protocol.InitResponse.canvas_width)
  return _internal_canvas_width();
}
inline void InitResponse::_internal_set_canvas_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  canvas_width_ = value;
}
inline void InitResponse::set_canvas_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_canvas_width(value);
  // @@protoc_insertion_point(field_set:protocol.InitResponse.canvas_width)
}

// uint32 canvas_height = 2;
inline void InitResponse::clear_canvas_height() {
  canvas_height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InitResponse::_internal_canvas_height() const {
  return canvas_height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 InitResponse::canvas_height() const {
  // @@protoc_insertion_point(field_get:protocol.InitResponse.canvas_height)
  return _internal_canvas_height();
}
inline void InitResponse::_internal_set_canvas_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  canvas_height_ = value;
}
inline void InitResponse::set_canvas_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_canvas_height(value);
  // @@protoc_insertion_point(field_set:protocol.InitResponse.canvas_height)
}

// repeated .protocol.Scene scenes = 3;
inline int InitResponse::_internal_scenes_size() const {
  return scenes_.size();
}
inline int InitResponse::scenes_size() const {
  return _internal_scenes_size();
}
inline void InitResponse::clear_scenes() {
  scenes_.Clear();
}
inline ::protocol::Scene* InitResponse::mutable_scenes(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.InitResponse.scenes)
  return scenes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Scene >*
InitResponse::mutable_scenes() {
  // @@protoc_insertion_point(field_mutable_list:protocol.InitResponse.scenes)
  return &scenes_;
}
inline const ::protocol::Scene& InitResponse::_internal_scenes(int index) const {
  return scenes_.Get(index);
}
inline const ::protocol::Scene& InitResponse::scenes(int index) const {
  // @@protoc_insertion_point(field_get:protocol.InitResponse.scenes)
  return _internal_scenes(index);
}
inline ::protocol::Scene* InitResponse::_internal_add_scenes() {
  return scenes_.Add();
}
inline ::protocol::Scene* InitResponse::add_scenes() {
  // @@protoc_insertion_point(field_add:protocol.InitResponse.scenes)
  return _internal_add_scenes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Scene >&
InitResponse::scenes() const {
  // @@protoc_insertion_point(field_list:protocol.InitResponse.scenes)
  return scenes_;
}

// -------------------------------------------------------------------

// Scene

// string name = 1;
inline void Scene::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Scene::name() const {
  // @@protoc_insertion_point(field_get:protocol.Scene.name)
  return _internal_name();
}
inline void Scene::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:protocol.Scene.name)
}
inline std::string* Scene::mutable_name() {
  // @@protoc_insertion_point(field_mutable:protocol.Scene.name)
  return _internal_mutable_name();
}
inline const std::string& Scene::_internal_name() const {
  return name_.Get();
}
inline void Scene::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Scene::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.Scene.name)
}
inline void Scene::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.Scene.name)
}
inline void Scene::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.Scene.name)
}
inline std::string* Scene::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Scene::release_name() {
  // @@protoc_insertion_point(field_release:protocol.Scene.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Scene::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.Scene.name)
}

// -------------------------------------------------------------------

// ApplyUpdate

// .protocol.CreateSource create_source = 1;
inline bool ApplyUpdate::_internal_has_create_source() const {
  return change_case() == kCreateSource;
}
inline bool ApplyUpdate::has_create_source() const {
  return _internal_has_create_source();
}
inline void ApplyUpdate::set_has_create_source() {
  _oneof_case_[0] = kCreateSource;
}
inline void ApplyUpdate::clear_create_source() {
  if (_internal_has_create_source()) {
    if (GetArena() == nullptr) {
      delete change_.create_source_;
    }
    clear_has_change();
  }
}
inline ::protocol::CreateSource* ApplyUpdate::release_create_source() {
  // @@protoc_insertion_point(field_release:protocol.ApplyUpdate.create_source)
  if (_internal_has_create_source()) {
    clear_has_change();
      ::protocol::CreateSource* temp = change_.create_source_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    change_.create_source_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::CreateSource& ApplyUpdate::_internal_create_source() const {
  return _internal_has_create_source()
      ? *change_.create_source_
      : *reinterpret_cast< ::protocol::CreateSource*>(&::protocol::_CreateSource_default_instance_);
}
inline const ::protocol::CreateSource& ApplyUpdate::create_source() const {
  // @@protoc_insertion_point(field_get:protocol.ApplyUpdate.create_source)
  return _internal_create_source();
}
inline ::protocol::CreateSource* ApplyUpdate::unsafe_arena_release_create_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.ApplyUpdate.create_source)
  if (_internal_has_create_source()) {
    clear_has_change();
    ::protocol::CreateSource* temp = change_.create_source_;
    change_.create_source_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ApplyUpdate::unsafe_arena_set_allocated_create_source(::protocol::CreateSource* create_source) {
  clear_change();
  if (create_source) {
    set_has_create_source();
    change_.create_source_ = create_source;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.ApplyUpdate.create_source)
}
inline ::protocol::CreateSource* ApplyUpdate::_internal_mutable_create_source() {
  if (!_internal_has_create_source()) {
    clear_change();
    set_has_create_source();
    change_.create_source_ = CreateMaybeMessage< ::protocol::CreateSource >(GetArena());
  }
  return change_.create_source_;
}
inline ::protocol::CreateSource* ApplyUpdate::mutable_create_source() {
  // @@protoc_insertion_point(field_mutable:protocol.ApplyUpdate.create_source)
  return _internal_mutable_create_source();
}

// .protocol.UpdateSource update_source = 3;
inline bool ApplyUpdate::_internal_has_update_source() const {
  return change_case() == kUpdateSource;
}
inline bool ApplyUpdate::has_update_source() const {
  return _internal_has_update_source();
}
inline void ApplyUpdate::set_has_update_source() {
  _oneof_case_[0] = kUpdateSource;
}
inline void ApplyUpdate::clear_update_source() {
  if (_internal_has_update_source()) {
    if (GetArena() == nullptr) {
      delete change_.update_source_;
    }
    clear_has_change();
  }
}
inline ::protocol::UpdateSource* ApplyUpdate::release_update_source() {
  // @@protoc_insertion_point(field_release:protocol.ApplyUpdate.update_source)
  if (_internal_has_update_source()) {
    clear_has_change();
      ::protocol::UpdateSource* temp = change_.update_source_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    change_.update_source_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::UpdateSource& ApplyUpdate::_internal_update_source() const {
  return _internal_has_update_source()
      ? *change_.update_source_
      : *reinterpret_cast< ::protocol::UpdateSource*>(&::protocol::_UpdateSource_default_instance_);
}
inline const ::protocol::UpdateSource& ApplyUpdate::update_source() const {
  // @@protoc_insertion_point(field_get:protocol.ApplyUpdate.update_source)
  return _internal_update_source();
}
inline ::protocol::UpdateSource* ApplyUpdate::unsafe_arena_release_update_source() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.ApplyUpdate.update_source)
  if (_internal_has_update_source()) {
    clear_has_change();
    ::protocol::UpdateSource* temp = change_.update_source_;
    change_.update_source_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ApplyUpdate::unsafe_arena_set_allocated_update_source(::protocol::UpdateSource* update_source) {
  clear_change();
  if (update_source) {
    set_has_update_source();
    change_.update_source_ = update_source;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.ApplyUpdate.update_source)
}
inline ::protocol::UpdateSource* ApplyUpdate::_internal_mutable_update_source() {
  if (!_internal_has_update_source()) {
    clear_change();
    set_has_update_source();
    change_.update_source_ = CreateMaybeMessage< ::protocol::UpdateSource >(GetArena());
  }
  return change_.update_source_;
}
inline ::protocol::UpdateSource* ApplyUpdate::mutable_update_source() {
  // @@protoc_insertion_point(field_mutable:protocol.ApplyUpdate.update_source)
  return _internal_mutable_update_source();
}

// .protocol.AppendChild append_child = 2;
inline bool ApplyUpdate::_internal_has_append_child() const {
  return change_case() == kAppendChild;
}
inline bool ApplyUpdate::has_append_child() const {
  return _internal_has_append_child();
}
inline void ApplyUpdate::set_has_append_child() {
  _oneof_case_[0] = kAppendChild;
}
inline void ApplyUpdate::clear_append_child() {
  if (_internal_has_append_child()) {
    if (GetArena() == nullptr) {
      delete change_.append_child_;
    }
    clear_has_change();
  }
}
inline ::protocol::AppendChild* ApplyUpdate::release_append_child() {
  // @@protoc_insertion_point(field_release:protocol.ApplyUpdate.append_child)
  if (_internal_has_append_child()) {
    clear_has_change();
      ::protocol::AppendChild* temp = change_.append_child_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    change_.append_child_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::AppendChild& ApplyUpdate::_internal_append_child() const {
  return _internal_has_append_child()
      ? *change_.append_child_
      : *reinterpret_cast< ::protocol::AppendChild*>(&::protocol::_AppendChild_default_instance_);
}
inline const ::protocol::AppendChild& ApplyUpdate::append_child() const {
  // @@protoc_insertion_point(field_get:protocol.ApplyUpdate.append_child)
  return _internal_append_child();
}
inline ::protocol::AppendChild* ApplyUpdate::unsafe_arena_release_append_child() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.ApplyUpdate.append_child)
  if (_internal_has_append_child()) {
    clear_has_change();
    ::protocol::AppendChild* temp = change_.append_child_;
    change_.append_child_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ApplyUpdate::unsafe_arena_set_allocated_append_child(::protocol::AppendChild* append_child) {
  clear_change();
  if (append_child) {
    set_has_append_child();
    change_.append_child_ = append_child;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.ApplyUpdate.append_child)
}
inline ::protocol::AppendChild* ApplyUpdate::_internal_mutable_append_child() {
  if (!_internal_has_append_child()) {
    clear_change();
    set_has_append_child();
    change_.append_child_ = CreateMaybeMessage< ::protocol::AppendChild >(GetArena());
  }
  return change_.append_child_;
}
inline ::protocol::AppendChild* ApplyUpdate::mutable_append_child() {
  // @@protoc_insertion_point(field_mutable:protocol.ApplyUpdate.append_child)
  return _internal_mutable_append_child();
}

// .protocol.RemoveChild remove_child = 4;
inline bool ApplyUpdate::_internal_has_remove_child() const {
  return change_case() == kRemoveChild;
}
inline bool ApplyUpdate::has_remove_child() const {
  return _internal_has_remove_child();
}
inline void ApplyUpdate::set_has_remove_child() {
  _oneof_case_[0] = kRemoveChild;
}
inline void ApplyUpdate::clear_remove_child() {
  if (_internal_has_remove_child()) {
    if (GetArena() == nullptr) {
      delete change_.remove_child_;
    }
    clear_has_change();
  }
}
inline ::protocol::RemoveChild* ApplyUpdate::release_remove_child() {
  // @@protoc_insertion_point(field_release:protocol.ApplyUpdate.remove_child)
  if (_internal_has_remove_child()) {
    clear_has_change();
      ::protocol::RemoveChild* temp = change_.remove_child_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    change_.remove_child_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::RemoveChild& ApplyUpdate::_internal_remove_child() const {
  return _internal_has_remove_child()
      ? *change_.remove_child_
      : *reinterpret_cast< ::protocol::RemoveChild*>(&::protocol::_RemoveChild_default_instance_);
}
inline const ::protocol::RemoveChild& ApplyUpdate::remove_child() const {
  // @@protoc_insertion_point(field_get:protocol.ApplyUpdate.remove_child)
  return _internal_remove_child();
}
inline ::protocol::RemoveChild* ApplyUpdate::unsafe_arena_release_remove_child() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.ApplyUpdate.remove_child)
  if (_internal_has_remove_child()) {
    clear_has_change();
    ::protocol::RemoveChild* temp = change_.remove_child_;
    change_.remove_child_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ApplyUpdate::unsafe_arena_set_allocated_remove_child(::protocol::RemoveChild* remove_child) {
  clear_change();
  if (remove_child) {
    set_has_remove_child();
    change_.remove_child_ = remove_child;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.ApplyUpdate.remove_child)
}
inline ::protocol::RemoveChild* ApplyUpdate::_internal_mutable_remove_child() {
  if (!_internal_has_remove_child()) {
    clear_change();
    set_has_remove_child();
    change_.remove_child_ = CreateMaybeMessage< ::protocol::RemoveChild >(GetArena());
  }
  return change_.remove_child_;
}
inline ::protocol::RemoveChild* ApplyUpdate::mutable_remove_child() {
  // @@protoc_insertion_point(field_mutable:protocol.ApplyUpdate.remove_child)
  return _internal_mutable_remove_child();
}

inline bool ApplyUpdate::has_change() const {
  return change_case() != CHANGE_NOT_SET;
}
inline void ApplyUpdate::clear_has_change() {
  _oneof_case_[0] = CHANGE_NOT_SET;
}
inline ApplyUpdate::ChangeCase ApplyUpdate::change_case() const {
  return ApplyUpdate::ChangeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CreateSource

// string id = 1;
inline void CreateSource::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateSource::id() const {
  // @@protoc_insertion_point(field_get:protocol.CreateSource.id)
  return _internal_id();
}
inline void CreateSource::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protocol.CreateSource.id)
}
inline std::string* CreateSource::mutable_id() {
  // @@protoc_insertion_point(field_mutable:protocol.CreateSource.id)
  return _internal_mutable_id();
}
inline const std::string& CreateSource::_internal_id() const {
  return id_.Get();
}
inline void CreateSource::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateSource::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.CreateSource.id)
}
inline void CreateSource::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.CreateSource.id)
}
inline void CreateSource::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.CreateSource.id)
}
inline std::string* CreateSource::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateSource::release_id() {
  // @@protoc_insertion_point(field_release:protocol.CreateSource.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateSource::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.CreateSource.id)
}

// string name = 2;
inline void CreateSource::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CreateSource::name() const {
  // @@protoc_insertion_point(field_get:protocol.CreateSource.name)
  return _internal_name();
}
inline void CreateSource::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:protocol.CreateSource.name)
}
inline std::string* CreateSource::mutable_name() {
  // @@protoc_insertion_point(field_mutable:protocol.CreateSource.name)
  return _internal_mutable_name();
}
inline const std::string& CreateSource::_internal_name() const {
  return name_.Get();
}
inline void CreateSource::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CreateSource::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.CreateSource.name)
}
inline void CreateSource::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.CreateSource.name)
}
inline void CreateSource::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.CreateSource.name)
}
inline std::string* CreateSource::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CreateSource::release_name() {
  // @@protoc_insertion_point(field_release:protocol.CreateSource.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateSource::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.CreateSource.name)
}

// .protocol.ObjectValue settings = 3;
inline bool CreateSource::_internal_has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline bool CreateSource::has_settings() const {
  return _internal_has_settings();
}
inline void CreateSource::clear_settings() {
  if (GetArena() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::protocol::ObjectValue& CreateSource::_internal_settings() const {
  const ::protocol::ObjectValue* p = settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::ObjectValue*>(
      &::protocol::_ObjectValue_default_instance_);
}
inline const ::protocol::ObjectValue& CreateSource::settings() const {
  // @@protoc_insertion_point(field_get:protocol.CreateSource.settings)
  return _internal_settings();
}
inline void CreateSource::unsafe_arena_set_allocated_settings(
    ::protocol::ObjectValue* settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.CreateSource.settings)
}
inline ::protocol::ObjectValue* CreateSource::release_settings() {
  
  ::protocol::ObjectValue* temp = settings_;
  settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::ObjectValue* CreateSource::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:protocol.CreateSource.settings)
  
  ::protocol::ObjectValue* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::protocol::ObjectValue* CreateSource::_internal_mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::ObjectValue>(GetArena());
    settings_ = p;
  }
  return settings_;
}
inline ::protocol::ObjectValue* CreateSource::mutable_settings() {
  // @@protoc_insertion_point(field_mutable:protocol.CreateSource.settings)
  return _internal_mutable_settings();
}
inline void CreateSource::set_allocated_settings(::protocol::ObjectValue* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:protocol.CreateSource.settings)
}

// -------------------------------------------------------------------

// UpdateSource

// string name = 2;
inline void UpdateSource::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UpdateSource::name() const {
  // @@protoc_insertion_point(field_get:protocol.UpdateSource.name)
  return _internal_name();
}
inline void UpdateSource::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:protocol.UpdateSource.name)
}
inline std::string* UpdateSource::mutable_name() {
  // @@protoc_insertion_point(field_mutable:protocol.UpdateSource.name)
  return _internal_mutable_name();
}
inline const std::string& UpdateSource::_internal_name() const {
  return name_.Get();
}
inline void UpdateSource::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpdateSource::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.UpdateSource.name)
}
inline void UpdateSource::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.UpdateSource.name)
}
inline void UpdateSource::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.UpdateSource.name)
}
inline std::string* UpdateSource::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpdateSource::release_name() {
  // @@protoc_insertion_point(field_release:protocol.UpdateSource.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateSource::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.UpdateSource.name)
}

// .protocol.ObjectValue changed_props = 3;
inline bool UpdateSource::_internal_has_changed_props() const {
  return this != internal_default_instance() && changed_props_ != nullptr;
}
inline bool UpdateSource::has_changed_props() const {
  return _internal_has_changed_props();
}
inline void UpdateSource::clear_changed_props() {
  if (GetArena() == nullptr && changed_props_ != nullptr) {
    delete changed_props_;
  }
  changed_props_ = nullptr;
}
inline const ::protocol::ObjectValue& UpdateSource::_internal_changed_props() const {
  const ::protocol::ObjectValue* p = changed_props_;
  return p != nullptr ? *p : *reinterpret_cast<const ::protocol::ObjectValue*>(
      &::protocol::_ObjectValue_default_instance_);
}
inline const ::protocol::ObjectValue& UpdateSource::changed_props() const {
  // @@protoc_insertion_point(field_get:protocol.UpdateSource.changed_props)
  return _internal_changed_props();
}
inline void UpdateSource::unsafe_arena_set_allocated_changed_props(
    ::protocol::ObjectValue* changed_props) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(changed_props_);
  }
  changed_props_ = changed_props;
  if (changed_props) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.UpdateSource.changed_props)
}
inline ::protocol::ObjectValue* UpdateSource::release_changed_props() {
  
  ::protocol::ObjectValue* temp = changed_props_;
  changed_props_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::protocol::ObjectValue* UpdateSource::unsafe_arena_release_changed_props() {
  // @@protoc_insertion_point(field_release:protocol.UpdateSource.changed_props)
  
  ::protocol::ObjectValue* temp = changed_props_;
  changed_props_ = nullptr;
  return temp;
}
inline ::protocol::ObjectValue* UpdateSource::_internal_mutable_changed_props() {
  
  if (changed_props_ == nullptr) {
    auto* p = CreateMaybeMessage<::protocol::ObjectValue>(GetArena());
    changed_props_ = p;
  }
  return changed_props_;
}
inline ::protocol::ObjectValue* UpdateSource::mutable_changed_props() {
  // @@protoc_insertion_point(field_mutable:protocol.UpdateSource.changed_props)
  return _internal_mutable_changed_props();
}
inline void UpdateSource::set_allocated_changed_props(::protocol::ObjectValue* changed_props) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete changed_props_;
  }
  if (changed_props) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(changed_props);
    if (message_arena != submessage_arena) {
      changed_props = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, changed_props, submessage_arena);
    }
    
  } else {
    
  }
  changed_props_ = changed_props;
  // @@protoc_insertion_point(field_set_allocated:protocol.UpdateSource.changed_props)
}

// -------------------------------------------------------------------

// AppendChild

// string parent_name = 1;
inline void AppendChild::clear_parent_name() {
  parent_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppendChild::parent_name() const {
  // @@protoc_insertion_point(field_get:protocol.AppendChild.parent_name)
  return _internal_parent_name();
}
inline void AppendChild::set_parent_name(const std::string& value) {
  _internal_set_parent_name(value);
  // @@protoc_insertion_point(field_set:protocol.AppendChild.parent_name)
}
inline std::string* AppendChild::mutable_parent_name() {
  // @@protoc_insertion_point(field_mutable:protocol.AppendChild.parent_name)
  return _internal_mutable_parent_name();
}
inline const std::string& AppendChild::_internal_parent_name() const {
  return parent_name_.Get();
}
inline void AppendChild::_internal_set_parent_name(const std::string& value) {
  
  parent_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppendChild::set_parent_name(std::string&& value) {
  
  parent_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.AppendChild.parent_name)
}
inline void AppendChild::set_parent_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.AppendChild.parent_name)
}
inline void AppendChild::set_parent_name(const char* value,
    size_t size) {
  
  parent_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.AppendChild.parent_name)
}
inline std::string* AppendChild::_internal_mutable_parent_name() {
  
  return parent_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppendChild::release_parent_name() {
  // @@protoc_insertion_point(field_release:protocol.AppendChild.parent_name)
  return parent_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppendChild::set_allocated_parent_name(std::string* parent_name) {
  if (parent_name != nullptr) {
    
  } else {
    
  }
  parent_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.AppendChild.parent_name)
}

// string child_name = 2;
inline void AppendChild::clear_child_name() {
  child_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AppendChild::child_name() const {
  // @@protoc_insertion_point(field_get:protocol.AppendChild.child_name)
  return _internal_child_name();
}
inline void AppendChild::set_child_name(const std::string& value) {
  _internal_set_child_name(value);
  // @@protoc_insertion_point(field_set:protocol.AppendChild.child_name)
}
inline std::string* AppendChild::mutable_child_name() {
  // @@protoc_insertion_point(field_mutable:protocol.AppendChild.child_name)
  return _internal_mutable_child_name();
}
inline const std::string& AppendChild::_internal_child_name() const {
  return child_name_.Get();
}
inline void AppendChild::_internal_set_child_name(const std::string& value) {
  
  child_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AppendChild::set_child_name(std::string&& value) {
  
  child_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.AppendChild.child_name)
}
inline void AppendChild::set_child_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  child_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.AppendChild.child_name)
}
inline void AppendChild::set_child_name(const char* value,
    size_t size) {
  
  child_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.AppendChild.child_name)
}
inline std::string* AppendChild::_internal_mutable_child_name() {
  
  return child_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AppendChild::release_child_name() {
  // @@protoc_insertion_point(field_release:protocol.AppendChild.child_name)
  return child_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppendChild::set_allocated_child_name(std::string* child_name) {
  if (child_name != nullptr) {
    
  } else {
    
  }
  child_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), child_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.AppendChild.child_name)
}

// -------------------------------------------------------------------

// RemoveChild

// string parent_name = 1;
inline void RemoveChild::clear_parent_name() {
  parent_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveChild::parent_name() const {
  // @@protoc_insertion_point(field_get:protocol.RemoveChild.parent_name)
  return _internal_parent_name();
}
inline void RemoveChild::set_parent_name(const std::string& value) {
  _internal_set_parent_name(value);
  // @@protoc_insertion_point(field_set:protocol.RemoveChild.parent_name)
}
inline std::string* RemoveChild::mutable_parent_name() {
  // @@protoc_insertion_point(field_mutable:protocol.RemoveChild.parent_name)
  return _internal_mutable_parent_name();
}
inline const std::string& RemoveChild::_internal_parent_name() const {
  return parent_name_.Get();
}
inline void RemoveChild::_internal_set_parent_name(const std::string& value) {
  
  parent_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveChild::set_parent_name(std::string&& value) {
  
  parent_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.RemoveChild.parent_name)
}
inline void RemoveChild::set_parent_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.RemoveChild.parent_name)
}
inline void RemoveChild::set_parent_name(const char* value,
    size_t size) {
  
  parent_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.RemoveChild.parent_name)
}
inline std::string* RemoveChild::_internal_mutable_parent_name() {
  
  return parent_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveChild::release_parent_name() {
  // @@protoc_insertion_point(field_release:protocol.RemoveChild.parent_name)
  return parent_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveChild::set_allocated_parent_name(std::string* parent_name) {
  if (parent_name != nullptr) {
    
  } else {
    
  }
  parent_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.RemoveChild.parent_name)
}

// string child_name = 2;
inline void RemoveChild::clear_child_name() {
  child_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoveChild::child_name() const {
  // @@protoc_insertion_point(field_get:protocol.RemoveChild.child_name)
  return _internal_child_name();
}
inline void RemoveChild::set_child_name(const std::string& value) {
  _internal_set_child_name(value);
  // @@protoc_insertion_point(field_set:protocol.RemoveChild.child_name)
}
inline std::string* RemoveChild::mutable_child_name() {
  // @@protoc_insertion_point(field_mutable:protocol.RemoveChild.child_name)
  return _internal_mutable_child_name();
}
inline const std::string& RemoveChild::_internal_child_name() const {
  return child_name_.Get();
}
inline void RemoveChild::_internal_set_child_name(const std::string& value) {
  
  child_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoveChild::set_child_name(std::string&& value) {
  
  child_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.RemoveChild.child_name)
}
inline void RemoveChild::set_child_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  child_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.RemoveChild.child_name)
}
inline void RemoveChild::set_child_name(const char* value,
    size_t size) {
  
  child_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.RemoveChild.child_name)
}
inline std::string* RemoveChild::_internal_mutable_child_name() {
  
  return child_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoveChild::release_child_name() {
  // @@protoc_insertion_point(field_release:protocol.RemoveChild.child_name)
  return child_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoveChild::set_allocated_child_name(std::string* child_name) {
  if (child_name != nullptr) {
    
  } else {
    
  }
  child_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), child_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.RemoveChild.child_name)
}

// -------------------------------------------------------------------

// Prop

// string key = 1;
inline void Prop::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Prop::key() const {
  // @@protoc_insertion_point(field_get:protocol.Prop.key)
  return _internal_key();
}
inline void Prop::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:protocol.Prop.key)
}
inline std::string* Prop::mutable_key() {
  // @@protoc_insertion_point(field_mutable:protocol.Prop.key)
  return _internal_mutable_key();
}
inline const std::string& Prop::_internal_key() const {
  return key_.Get();
}
inline void Prop::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Prop::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.Prop.key)
}
inline void Prop::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.Prop.key)
}
inline void Prop::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.Prop.key)
}
inline std::string* Prop::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Prop::release_key() {
  // @@protoc_insertion_point(field_release:protocol.Prop.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Prop::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:protocol.Prop.key)
}

// string string_value = 2;
inline bool Prop::_internal_has_string_value() const {
  return value_case() == kStringValue;
}
inline void Prop::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void Prop::clear_string_value() {
  if (_internal_has_string_value()) {
    value_.string_value_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_value();
  }
}
inline const std::string& Prop::string_value() const {
  // @@protoc_insertion_point(field_get:protocol.Prop.string_value)
  return _internal_string_value();
}
inline void Prop::set_string_value(const std::string& value) {
  _internal_set_string_value(value);
  // @@protoc_insertion_point(field_set:protocol.Prop.string_value)
}
inline std::string* Prop::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable:protocol.Prop.string_value)
  return _internal_mutable_string_value();
}
inline const std::string& Prop::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return value_.string_value_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Prop::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Prop::set_string_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:protocol.Prop.string_value)
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:protocol.Prop.string_value)
}
inline void Prop::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:protocol.Prop.string_value)
}
inline void Prop::set_string_value(const char* value,
                             size_t size) {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:protocol.Prop.string_value)
}
inline std::string* Prop::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.string_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Prop::release_string_value() {
  // @@protoc_insertion_point(field_release:protocol.Prop.string_value)
  if (_internal_has_string_value()) {
    clear_has_value();
    return value_.string_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Prop::set_allocated_string_value(std::string* string_value) {
  if (has_value()) {
    clear_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(string_value);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(string_value);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:protocol.Prop.string_value)
}

// int64 int_value = 3;
inline bool Prop::_internal_has_int_value() const {
  return value_case() == kIntValue;
}
inline void Prop::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
inline void Prop::clear_int_value() {
  if (_internal_has_int_value()) {
    value_.int_value_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Prop::_internal_int_value() const {
  if (_internal_has_int_value()) {
    return value_.int_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Prop::_internal_set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  value_.int_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Prop::int_value() const {
  // @@protoc_insertion_point(field_get:protocol.Prop.int_value)
  return _internal_int_value();
}
inline void Prop::set_int_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int_value(value);
  // @@protoc_insertion_point(field_set:protocol.Prop.int_value)
}

// double float_value = 4;
inline bool Prop::_internal_has_float_value() const {
  return value_case() == kFloatValue;
}
inline void Prop::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void Prop::clear_float_value() {
  if (_internal_has_float_value()) {
    value_.float_value_ = 0;
    clear_has_value();
  }
}
inline double Prop::_internal_float_value() const {
  if (_internal_has_float_value()) {
    return value_.float_value_;
  }
  return 0;
}
inline void Prop::_internal_set_float_value(double value) {
  if (!_internal_has_float_value()) {
    clear_value();
    set_has_float_value();
  }
  value_.float_value_ = value;
}
inline double Prop::float_value() const {
  // @@protoc_insertion_point(field_get:protocol.Prop.float_value)
  return _internal_float_value();
}
inline void Prop::set_float_value(double value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:protocol.Prop.float_value)
}

// bool bool_value = 5;
inline bool Prop::_internal_has_bool_value() const {
  return value_case() == kBoolValue;
}
inline void Prop::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void Prop::clear_bool_value() {
  if (_internal_has_bool_value()) {
    value_.bool_value_ = false;
    clear_has_value();
  }
}
inline bool Prop::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return value_.bool_value_;
  }
  return false;
}
inline void Prop::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_value();
    set_has_bool_value();
  }
  value_.bool_value_ = value;
}
inline bool Prop::bool_value() const {
  // @@protoc_insertion_point(field_get:protocol.Prop.bool_value)
  return _internal_bool_value();
}
inline void Prop::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:protocol.Prop.bool_value)
}

// .protocol.ObjectValue object_value = 6;
inline bool Prop::_internal_has_object_value() const {
  return value_case() == kObjectValue;
}
inline bool Prop::has_object_value() const {
  return _internal_has_object_value();
}
inline void Prop::set_has_object_value() {
  _oneof_case_[0] = kObjectValue;
}
inline void Prop::clear_object_value() {
  if (_internal_has_object_value()) {
    if (GetArena() == nullptr) {
      delete value_.object_value_;
    }
    clear_has_value();
  }
}
inline ::protocol::ObjectValue* Prop::release_object_value() {
  // @@protoc_insertion_point(field_release:protocol.Prop.object_value)
  if (_internal_has_object_value()) {
    clear_has_value();
      ::protocol::ObjectValue* temp = value_.object_value_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.object_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::protocol::ObjectValue& Prop::_internal_object_value() const {
  return _internal_has_object_value()
      ? *value_.object_value_
      : *reinterpret_cast< ::protocol::ObjectValue*>(&::protocol::_ObjectValue_default_instance_);
}
inline const ::protocol::ObjectValue& Prop::object_value() const {
  // @@protoc_insertion_point(field_get:protocol.Prop.object_value)
  return _internal_object_value();
}
inline ::protocol::ObjectValue* Prop::unsafe_arena_release_object_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:protocol.Prop.object_value)
  if (_internal_has_object_value()) {
    clear_has_value();
    ::protocol::ObjectValue* temp = value_.object_value_;
    value_.object_value_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Prop::unsafe_arena_set_allocated_object_value(::protocol::ObjectValue* object_value) {
  clear_value();
  if (object_value) {
    set_has_object_value();
    value_.object_value_ = object_value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protocol.Prop.object_value)
}
inline ::protocol::ObjectValue* Prop::_internal_mutable_object_value() {
  if (!_internal_has_object_value()) {
    clear_value();
    set_has_object_value();
    value_.object_value_ = CreateMaybeMessage< ::protocol::ObjectValue >(GetArena());
  }
  return value_.object_value_;
}
inline ::protocol::ObjectValue* Prop::mutable_object_value() {
  // @@protoc_insertion_point(field_mutable:protocol.Prop.object_value)
  return _internal_mutable_object_value();
}

// bool undefined = 7;
inline bool Prop::_internal_has_undefined() const {
  return value_case() == kUndefined;
}
inline void Prop::set_has_undefined() {
  _oneof_case_[0] = kUndefined;
}
inline void Prop::clear_undefined() {
  if (_internal_has_undefined()) {
    value_.undefined_ = false;
    clear_has_value();
  }
}
inline bool Prop::_internal_undefined() const {
  if (_internal_has_undefined()) {
    return value_.undefined_;
  }
  return false;
}
inline void Prop::_internal_set_undefined(bool value) {
  if (!_internal_has_undefined()) {
    clear_value();
    set_has_undefined();
  }
  value_.undefined_ = value;
}
inline bool Prop::undefined() const {
  // @@protoc_insertion_point(field_get:protocol.Prop.undefined)
  return _internal_undefined();
}
inline void Prop::set_undefined(bool value) {
  _internal_set_undefined(value);
  // @@protoc_insertion_point(field_set:protocol.Prop.undefined)
}

inline bool Prop::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Prop::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Prop::ValueCase Prop::value_case() const {
  return Prop::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ObjectValue

// repeated .protocol.Prop props = 1;
inline int ObjectValue::_internal_props_size() const {
  return props_.size();
}
inline int ObjectValue::props_size() const {
  return _internal_props_size();
}
inline void ObjectValue::clear_props() {
  props_.Clear();
}
inline ::protocol::Prop* ObjectValue::mutable_props(int index) {
  // @@protoc_insertion_point(field_mutable:protocol.ObjectValue.props)
  return props_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Prop >*
ObjectValue::mutable_props() {
  // @@protoc_insertion_point(field_mutable_list:protocol.ObjectValue.props)
  return &props_;
}
inline const ::protocol::Prop& ObjectValue::_internal_props(int index) const {
  return props_.Get(index);
}
inline const ::protocol::Prop& ObjectValue::props(int index) const {
  // @@protoc_insertion_point(field_get:protocol.ObjectValue.props)
  return _internal_props(index);
}
inline ::protocol::Prop* ObjectValue::_internal_add_props() {
  return props_.Add();
}
inline ::protocol::Prop* ObjectValue::add_props() {
  // @@protoc_insertion_point(field_add:protocol.ObjectValue.props)
  return _internal_add_props();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protocol::Prop >&
ObjectValue::props() const {
  // @@protoc_insertion_point(field_list:protocol.ObjectValue.props)
  return props_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
